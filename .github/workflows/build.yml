name: build

on: [push, pull_request]

jobs:
  arm-image:
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install bison cmake flex g++ gdb make ninja-build unzip libssl-dev

      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build
        run: make

      - name: Set artifacts suffix (if tag)
        if: startsWith(github.ref, 'refs/tags/') == true
        run: echo "git_suffix=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Set artifacts suffix (if branch)
        if: startsWith(github.ref, 'refs/tags/') != true
        run: echo "git_suffix=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdcard.img-${{env.git_suffix}}
          path: |
            buildroot/output/images/sdcard.img
            buildroot/output/images/image.swu
          if-no-files-found: error

  native-app-linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install cmake g++ ninja-build libfuse2

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache linuxdeploy
        uses: actions/cache@v4
        id: cache
        with:
          key: ${{ runner.OS }}-cache-${{ hashFiles('.github/workflows/build.yml') }}
          path: ~/bin/linuxdeploy.AppImage

      - name: Install linuxdeploy (if cache not found)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/bin && cd $_
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20230713-1/linuxdeploy-x86_64.AppImage -O linuxdeploy.AppImage
          chmod +x linuxdeploy.AppImage

      - name: Build
        run: |
          # Add linuxdeploy to PATH
          export PATH=~/bin:$PATH
          # Build
          make -C app
          make -C app install

      - name: Set artifacts suffix (if tag)
        if: startsWith(github.ref, 'refs/tags/') == true
        run: echo "git_suffix=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Set artifacts suffix (if branch)
        if: startsWith(github.ref, 'refs/tags/') != true
        run: echo "git_suffix=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Append branch name and hash to .AppImage filename
        run: |
          cd app/build/install
          mv *.AppImage $(basename *.AppImage .AppImage)-${{env.git_suffix}}.AppImage

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-linux-${{env.git_suffix}}
          path: app/build/install/*
          if-no-files-found: error

  native-app-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache
        with:
          key: ${{ runner.OS }}-cache-${{ hashFiles('.github/workflows/build.yml') }}
          path: C:/mingw64

      - name: Install MinGW-w64 (if cache not found)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl.exe -L https://github.com/brechtsanders/winlibs_mingw/releases/download/13.2.0-16.0.6-11.0.0-ucrt-r1/winlibs-x86_64-posix-seh-gcc-13.2.0-mingw-w64ucrt-11.0.0-r1.zip -o mingw64.zip
          tar -xf mingw64.zip -C C:\
          Copy-Item C:\mingw64\bin\mingw32-make.exe C:\mingw64\bin\make.exe

      - name: Build
        run: |
          $env:Path = "C:\mingw64\bin;" + $env:Path
          make -C app

      - name: Set artifacts suffix (if tag)
        if: startsWith(github.ref, 'refs/tags/') == true
        run: Add-Content $env:GITHUB_ENV "git_suffix=$(git describe --tags --abbrev=0)"

      - name: Set artifacts suffix (if branch)
        if: startsWith(github.ref, 'refs/tags/') != true
        run: Add-Content $env:GITHUB_ENV "git_suffix=$(Write-Output "$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)")"

      - name: Append branch name and hash to app executable
        run: |
          cd app/build
          ren app.exe app-${{env.git_suffix}}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-windows-${{env.git_suffix}}
          path: app/build/app-${{env.git_suffix}}.exe
          if-no-files-found: error
